// 1. Создай объект student с вложенными объектами и массивами. Затем создай поверхностную копию этого объекта (разными способами!) и измени вложенные структуры (массивы, объекты) у копии, распечатай их.
// Затем распечатай те же свойства у оригинала, чтобы увидеть, как на нем отразились изменения. Объясни своими словами, что произошло;

const student = {
  name: "Nurbek",
  age: 17,
  learned: {
    HTML: "Full",
    CSS: "Full",
    JS: "Almost",
  },
  hobbies: ["reading", "walking", "swimming"],
};

const shallowCopyObject = Object.assign({}, student);
const shallowCopySpread = { ...student };
shallowCopyObject.learned.CSS = "Almost";
shallowCopySpread.hobbies[0] = "traveling";

console.log("shallowCopyObject:", shallowCopyObject);
console.log("shallowCopySpread:", shallowCopySpread);
console.log("student:", student);

// Обяснение *своими словами*: Я использовал два способа поверхностного копирование. Это озночает, что я копирую их по ссылке, то есть, если я изменю что-то в копии,
// то в оригинале тоже ихмениться. Потому что они оба ссылаются на одну и тожу ссылку, а за ссылкой находиться само значение. Изменил значание в копии = изменил значение в ссылке!

// 2. Создать копию объекта, внутри которого есть методы (функции), с помощью использовать JSON методов. Затем попробуй вызывать метод у копии объекта.
// Объясни своими словами, что произошло;

const user = {
  name: "Nurbek",
  age: 17,
  addres: {
    country: "Somewhere",
    city: "Somewhere",
    zip: "171200",
  },
  from: () => console.log("Nurbek from somewhere:)"),
};

const deepCopyJSON = JSON.parse(JSON.stringify(user));

console.log("user from:", deepCopyJSON.from);

// Обяснение: Метод JSON хоть и копирует объекты по значение, то есть незавимимую копию, он не может копировать функции.
// Следоватеьно, здесь консоль выводит "Undefined", потому что его попросту нету!

// 3*. Проанализируй и разбери функцию глубокого копирования из урока (function deepCopy). Покрой каждую строчку кода комментариями, которые объясняют, что делает этот кусок кода и зачем.
// То есть после этого задания у тебя должно сложиться полное понимание того, как работает эта функция, чтобы в дальнейшем ты смог ее применить!

//Подобный разбор:

function deepCopy(obj) {
  // Создаем рекурсивную функцию
  if (obj === null || typeof obj !== "object") {
    // Проверям, если obj равен null или тип obj не равен 'object' (значит это примитив)
    return obj; // то возрвашаем его, потому что нечего копировать (глубоко)
  }

  const copy = Array.isArray(obj) ? [] : {}; // Создаем константу, чтобы потом в него положить копию. Проверяем, являеться ли obj массивом, если да то создаем новый массив, если нет то объект. Это "?" тернарный оператор, сокрашение от if...else. Оно мне понравился:)
  for (let key in obj) {
    // Проходимся по всем ключам в объекте (или массиве)
    if (obj.hasOwnProperty(key)) {
      // Проверяем, принадлежит ли свойство самому объекту, а не унаследовано от прототипа
      copy[key] = deepCopy(obj[key]); // Здесь вызываем deepCopy - это и есть рекурсия, то есть вазываем самого себя, чтобы дойти до самого глубокого свойства
    }
  }
  return copy; // После того, как все скопировано, выходим из цикла и возрващаем объект
}

const orginal = { a: 1, b: { c: 2 } };
const deepCopyObj = deepCopy(orginal);
deepCopyObj.b.c = 3;

console.log(orginal.b.c);
