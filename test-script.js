// 1. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º. –ï—Å–ª–∏ –¥–∞ - —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –Ω–µ—Ç - false;

function isPalindrome(str) {
  const lowerStr = str.toLowerCase();
  const reversedStr = lowerStr.split('').reverse().join('');
  return lowerStr === reversedStr;
}

const userAnswer = prompt('–í–≤–µ–¥–∏—Ç–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω —Ä–µ–∞–ª—å–Ω–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–ºüòÑ');
console.log(isPalindrome(userAnswer));

// 2. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ) –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–µ —Å–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ –≤ –Ω–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ;

// function findShortestWord(sentence) {
//   const words = sentence.split(' ');
//   let shortestWord = words[0];
//   for (let i = 1; i < words.length; i++) {
//     if (words[i].length < shortestWord.length) {
//       shortestWord = words[i];
//     }
//   }
//   return shortestWord;
// }

// const userSentence = prompt('–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ–µ...)');
// console.log(findShortestWord(userSentence));

// 3. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä. –ü—Ä–∏–º–µ—Ä: createPhoneNumber(123456789) ‚Üí 8 (123) 456-789;

// function formatPhoneNumber(number) {
//   const areaCode = number.slice(0, 3);
//   const firstPart = number.slice(3, 6);
//   const secondPart = number.slice(6, 9);
//   const correctNumber = `+7 (${areaCode }) ${firstPart }-${secondPart}`;
//   return correctNumber;
// }

// const userPhone = prompt('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä:');
// console.log(formatPhoneNumber(userPhone));

// 4. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∏—â–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤–µ;

// function findMinMax(array) {
//   const min  = Math.min(...array);
//   const max = Math.max(...array);
//   return `Min Value: ${min}\nMax Value: ${max}`;
// }

// const numbers = [43, 4398, 43920, 76943, 3974];
// console.log(findMinMax(numbers));

// 5. *–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤, –∞ –Ω–∞ –≤—ã—Ö–æ–¥–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è, –º–∞—Å—Å–∏–≤.
// –ü–æ–ø—Ä–æ–±—É–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –ø–æ—á–∏—Ç–∞–π –ø—Ä–æ bubble sort –∏ –ø–æ–ø—Ä–æ–±—É–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ—ë.

//–í–∞—Ä–∏–∞–Ω—Ç 1:
// function bubbleSort(array) {
//   const sortedArray = array.sort();
//   return sortedArray;
// }

// const numbers = [7, 3, 9, 4, 2, 5, 1, 6, 8];
// console.log(bubbleSort(numbers));

//–í–∞—Ä–∏–∞–Ω—Ç 2:

// function bubbleSort2(arr) {
//   const newArr = arr.slice();
//   for (let j = newArr.length - 1; j > 0; j--) {
//     let swapped = false;
//     for (let i = 0; i < j; i++) {
//       if (newArr[i] > newArr[i + 1]) {
//         let temp = newArr[i];
//         newArr[i] = newArr[i + 1];
//         newArr[i + 1] = temp;
//         swapped = true;
//       }
//     }
//     if (!swapped) break;
//   }
//   return newArr;
// }

// const arrNums = [9, 1, 10, 6, 8, 2, 7, 4, 3];
// console.log(bubbleSort2(arrNums));

