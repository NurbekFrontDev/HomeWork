const greet = 'Hello, World!'; //STRING
const myFavouriteNumber = 333; //NUMBER
const areMentorsGreat = true; //BOOLEAN
let x;  //UNDEFIEND
const none = null; //NULL

console.log(typeof greet);
console.log(typeof myFavouriteNumber);
console.log(typeof isMentorsGreat);
console.log(typeof x);
console.log(typeof none);

/*
Объяснение разницы между хранением данных по ссылке и по значению своими словами:

Если говорить очень простым языком, то когда мы присваиваем одной переменной другую, то создается просто копия "ЗНАЧЕНИЕ" первой переменной, то есть они никак не связаны между собой. Пример:
*/
let a = 10;
let b = a; // Создается КОПИЯ значения переменной "а", то есть 10

b = 20; // Изменяем "b", но a остается 10, потому что, мы просто меням значение "b" на 20, а не значения "а"
console.log(a); // 10
console.log(b); // 20

/*
Теперь, когда мы передаем, то есть, присваиваем объект(object), вмсето значение другого переменного, то они "Связываються" между собой, то есть, они связаны к одной ссылке, которое создает компьютер.
Пример:
*/
let object1 = {
    name: "Alex"
};
let object2 = object1; // Здесь, object2 получает ссылку на тот же объект, а не просто копируется, то есть он привязен к одной ссылке вместе с object1

object2.name = "Bob"; // И теперь, можно менять что угодно с помощью object2, object1 также будет меняться, так как они привязыно к одной ссылке

console.log(object1.name); // "Bob"
console.log(object2.name); // "Bob"

/*
Но, обекты, котороые между собой связаны, можно сдеалать так, чтобы просто "скопировать", чтобы создать независомый объект, для того, чтобы не менять другую переменную, он будет работать как обычной Примитив, которое не меняется.
Для этого, есть способ с "..." (spread):
*/

let obj1 = { 
    name: "Alex" 
};
let obj2 = { ...obj1 }; // Создается независимая копия объекта

obj2.name = "Bob"; 

console.log(obj1.name); // "Alice" (остался без изменений)
console.log(obj2.name); // "Bob"
